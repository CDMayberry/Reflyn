namespace Reflyn.Declarations
{
    /*
    public class CodeGenerator
    {
        private CodeDomProvider provider = new CSharpCodeProvider();

        [Category("Data")]
        public string MainNamespace { get; set; } = "";

        [Category("Data")]
        public string Tab { get; set; } = "    ";

        [Category("Data")]
        public string Copyright { get; set; } = "Generated by Refly";

        [Category("Data")]
        public bool CreateFolders { get; set; } = true;

        [Browsable(false)]
        public CodeDomProvider Provider
        {
            get => provider;
            set => provider = value ?? throw new ArgumentNullException("provider");
        }

        [Category("Data")]
        public CodeGeneratorOptions Options { get; } = new CodeGeneratorOptions();

        public static CodeDomProvider CsProvider => new CSharpCodeProvider();

        public static CodeDomProvider VbProvider => new VBCodeProvider();

        public event StringEventHandler FileCreated;

        public CodeGenerator()
        {
            Options.BracingStyle = "C";
        }

        protected virtual void OnFileCreated(StringEventArgs args)
        {
            FileCreated?.Invoke(this, args);
        }

        private string PathFromNamespace(string outputPath, string ns)
        {
            string text = null;
            if (ns.StartsWith(MainNamespace))
            {
                string text2 = ns.Substring(MainNamespace.Length);
                text = Path.Combine(outputPath, MainNamespace);
                text = Path.Combine(text, text2.Replace('.', '\\'));
            }
            else
            {
                text = Path.Combine(outputPath, ns.Replace('.', '\\'));
            }
            Directory.CreateDirectory(text);
            return text;
        }

        public void GenerateCode(string outputPath, NamespaceDeclaration ns)
        {
            throw new NotImplementedException();
            /*if (ns == null)
            {
                throw new ArgumentNullException(nameof(ns));
            }
            ICodeGenerator codeGenerator = provider.CreateGenerator();
            IDictionaryEnumerator enumerator = ns.ToCodeDom().GetEnumerator();
            while (enumerator.MoveNext())
            {
                var dictionaryEntry = (DictionaryEntry)enumerator.Current;
                var fileName = (FileName)dictionaryEntry.Key;
                var codeNamespace = (CodeNamespace)dictionaryEntry.Value;
                string path = (!CreateFolders) ? outputPath : PathFromNamespace(outputPath, fileName.Namespace);
                string text = Path.Combine(path, fileName.Name + "." + Provider.FileExtension);
                using (var writer = new StreamWriter(text))
                {
                    codeNamespace.Comments.Add(new CodeCommentStatement(Copyright));
                    var w = new IndentedTextWriter(writer, Tab);
                    codeGenerator.GenerateCodeFromNamespace(codeNamespace, w, Options);
                    OnFileCreated(new StringEventArgs(text));
                }
            }#1#
        }
    }
    */

}
